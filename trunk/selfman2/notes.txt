1. motivate idea
2. compare with other works, in eval, etc.
3. a new title?

4. other technical points in scichina review.
5. analysis

- intro要让人明白，哦，原来是这样的啊

- discussion on optimazation: biased neighbour selection,
  directional gossip, Efficient and Adaptive Epidemic-style
  Protocols for Reliable and Scalable Multicast, hier scamp

- emphasize on how epidemic algorithm is applied to managment.
  why self-man is important, and why epidemic is the right
  choice? 

- stateless, crash-only design in self-recovery

- selfmanagement开头就说general design，再说deploy，recovery等等
  的具体问题。intro部分对selfman的介绍（challenge 1）应该更一般
  一些，design部分再说abstract as global invariants(有点太扯的感
  觉）

- 解释为什么设计的很简单

- 有了合适的management semantic，smon就能被应用到很多地方。
- 有了agent，就能想怎么manage就怎么manage
- 有了epidemic就能有很好的scalability，另外也easy to implement
  and deploy, 更robust, resilient to failure

It employs epidemic algorithm

intro 说smon是什么，能做什么，

design说怎么做

两个问题：

1. smon能解决的问题说得太小

a. 针对tool说

challenges:

a. scalable and runs reliably with little human intervention
b. secure
c. reasonable application management semantic


2. smon如何工作说的黏糊，不畅快

SMON is a distributed application management system with
built-in self-management capability. It consists of peers on a
set of machines where applications will be deployed and running.
Peers of SMON monitor and maintain each other. They will
automatically deploy new peers on fresh machines, or recover
failed peers. SMON peers exchange their associated version
numbers and upgrade themselves to latest version. 


SMON deploys and maintains itself using epidemic algorithm.

(can be used at address challenge part)
SMON works by maintaining several global states consistently by
all the peers using epidemic algorithm. For example, . A peer
performs several maintainence tasks each of which maintains a
dedicated state.

TODO:

a) make up

challeng @ intro
discussion
eval
more tech @ design

b) idea

goal and meaning of smon

c) 体力活

a better design demo
check spelling and grammer
check reference

title and abstract

overhead算的不对，不应该算0的情况。
