=== SEMANTICS ===

1. quote

store and publish quote 

2. orders and portfolios

order = an request for trade
portfolio = an expectation of tradings, i.e., which and how many
in what price, realized by a series of orders/cancels.

3. account and position

account = cash + position
position = aggragation of trades

postion amount, avg price
limitations

4. strats

strat is a series of tradings, controlled by signals.

=== DATA MODELS ===

0. DESIGN NOTES

// <x>id has namespace prefix, e.g., ORDERNS:deadface for oid

// namespace schema

// an account has a separate db to store its orders,
// trades, postions, portfolios and cash, etc.

// there's no FrontID + SessionID + OrderRef in OnRtnTrade

// (future work) fields mapping from CTP response to flare names.

1. QUOTE
// only store the latest

as table:
code(key), updatetime, price, volume, bid1, ask1, ...

in redis:
quote index = 'quote':inst
qidx -> quote (also published)

2. ORDERS AND PORTFOLIOS
// store what filed? in what name? 

as table:
(order) orderuuid(key), order attributes
(trade) tradeuuid(key), trade attributes
(ptf def) ptfname, code, amount (no key, just rows of tuples)
(ptf realization) prid, code1's oids, code2's oids, ...

in redis:

oid = 'order:':uuid
tid = 'trade:':uuid
pname = 'pdef':unique_ptf_name
prid = 'pr':uuid // pr for portfolio realization

order, a redis hash
oid -> ctpIDS, orderstatus, tradevolume, _oreftp, _prid, _strat, _cancelid
cancel order, a redis hash
cancelid -> ..., _oid

order2trade, a redis list, used for fast lookup
oid -> list of tid

trade, a redis hash
tradeid -> ctptradeid, price, volume, inst, direction, time, exchange, _oid

portfolio definition, a redis hash
pdefname -> code1 amount, code2 amount, ... (minus for short)

portfolio realization, a redis hash
prid -> code1 oids, code2 oids, ...(oids are pickled as strings), _pname, _strat

(progress and other stats can be summrized from portfolio orders)
portfolio progress: prid -> inst trade amount / avgprice

3. ACCOUNT AND POSTION

// stat1: avg open and close in day
// stat2: avg open and close as time goes

position index = 'pos':inst:('long', 'short')

posidx: volume, avgprice, margin, pnl(a property)
(position is an aggreation of trades)

4. STRATS

